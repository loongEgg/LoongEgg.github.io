{"meta":{"title":"Loong Egg","subtitle":"","description":"一个强大的蓝人","author":"Loong Egg","url":"https://LoongEgg.github.io","root":"/"},"pages":[{"title":"about","date":"2020-06-13T04:44:20.000Z","updated":"2020-06-13T05:00:10.349Z","comments":true,"path":"about/index.html","permalink":"https://loongegg.github.io/about/index.html","excerpt":"","text":"一个强大的蓝人地精工程学毕业，开源软件开发与布道者 专精 程序开发 WPF/C#、MVVM设计模式 UI、Font设计 Inkscape、Fontforge 三维建模 FreeCAD 视频剪辑 Blender、Olive PCB软硬件设计 KiCAD、CubeIDE 以上专业名词的拼写 联系我 Email loongegg@163.com 知乎主页 https://www.zhihu.com/people/inner-geek bilibi主页 https://space.bilibili.com/14343016 微信公众号 香辣恐龙蛋"},{"title":"All Categories","date":"2020-06-13T04:28:29.000Z","updated":"2020-06-13T04:30:49.410Z","comments":true,"path":"categories/index.html","permalink":"https://loongegg.github.io/categories/index.html","excerpt":"","text":""},{"title":"All Tags","date":"2020-06-13T04:23:21.000Z","updated":"2020-06-13T04:26:11.891Z","comments":true,"path":"tags/index.html","permalink":"https://loongegg.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"C#/Udp-2.收发通信客户端的创建","slug":"C-Udp-2-收发通信客户端的创建","date":"2020-06-13T05:36:23.000Z","updated":"2020-06-13T05:41:12.902Z","comments":true,"path":"2020/06/13/C-Udp-2-收发通信客户端的创建/","link":"","permalink":"https://loongegg.github.io/2020/06/13/C-Udp-2-%E6%94%B6%E5%8F%91%E9%80%9A%E4%BF%A1%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E5%88%9B%E5%BB%BA/","excerpt":"","text":"前言1. 系列主题本系列文章，旨在实现使用Json进行配置的Udp收发器 An Udp Sender &amp; Receiver using json file to configure 2. 本文主题基本UDP收发通信客户端的创建 3. 目标框架(target framework) .net framework 4.5 to support using in windows with .net framework &gt;= 4.5 .net standard 2.0 to support using in linux with .net core &gt;= 2.0 4. 项目依赖（Dependency） LoongEgg.LoongLog an OpenSource cross-platform &amp; cross-framework log tool, you can get it from nuget or my github Newtonsoft.Json 5. 项目地址(Source code) github 6. 发行版获取 Search in nuget: LoongEgg.UdpCore 发送端Program.cs1234567891011121314151617181920212223using LoongEgg.LoongLog;using System;namespace UdpSender.Net45&#123; class Program &#123; static void Main(string[] args) &#123; Console.WriteLine(\"Hello World!\"); Logger.Enable(Loggers.ConsoleLogger | Loggers.DebugLogger); var sender = new LoongEgg.UdpCore.UdpSender(2233, true); bool stop = false; do &#123; Console.WriteLine(\"Enter a message or stop/s to exit\"); string input = Console.ReadLine(); stop = input.ToLower() == \"stop\" | input.ToLower() == \"s\"; sender.SendAsync($\"&#123;input&#125;\"); &#125; while (!stop); &#125; &#125;&#125; 接收端12345678910111213141516171819using LoongEgg.LoongLog;using System;namespace UdpReceiver.Net45&#123; class Program &#123; static void Main(string[] args) &#123; Console.WriteLine(\"Hello World!\"); Logger.Enable(Loggers.ConsoleLogger | Loggers.DebugLogger); var receiver = new LoongEgg.UdpCore.UdpReceiver(2233); receiver.ReaderAsync().Wait(); Console.WriteLine(\"Good bye~\"); &#125; &#125;&#125;","categories":[{"name":"C#/UDP","slug":"C-UDP","permalink":"https://loongegg.github.io/categories/C-UDP/"}],"tags":[{"name":"C#","slug":"C","permalink":"https://loongegg.github.io/tags/C/"},{"name":"UDP","slug":"UDP","permalink":"https://loongegg.github.io/tags/UDP/"}]},{"title":"C#/Udp-1.收发通信基础库的实现","slug":"C-Udp-1-收发通信基础库的实现","date":"2020-06-13T02:29:08.000Z","updated":"2020-06-13T05:38:11.087Z","comments":true,"path":"2020/06/13/C-Udp-1-收发通信基础库的实现/","link":"","permalink":"https://loongegg.github.io/2020/06/13/C-Udp-1-%E6%94%B6%E5%8F%91%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E5%BA%93%E7%9A%84%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"前言1. 系列主题本系列文章，旨在实现使用Json进行配置的Udp收发器 An Udp Sender &amp; Receiver using json file to configure 2. 本文主题基本UDP收发通信基础库的实现 3. 目标框架(target framework) .net framework 4.5 to support using in windows with .net framework &gt;= 4.5 .net standard 2.0 to support using in linux with .net core &gt;= 2.0 4. 项目依赖（Dependency） LoongEgg.LoongLog an OpenSource cross-platform &amp; cross-framework log tool, you can get it from nuget or my github Newtonsoft.Json 5. 项目地址(Source code) github 6. 发行版获取 Search in nuget: LoongEgg.UdpCore UdpSender.cs1.Properties123456789/// &lt;summary&gt;/// IP端口/// &lt;/summary&gt;public IPEndPoint EndPoint &#123; get; private set; &#125;/// &lt;summary&gt;/// 组地址/// &lt;/summary&gt;public string GroupAddress &#123; get; private set; &#125; 2.Constructors12345678910111213141516171819202122232425/// &lt;summary&gt;/// Udp发送器的构造器/// &lt;/summary&gt;/// &lt;param name=\"port\"&gt;端口号&lt;/param&gt;/// &lt;param name=\"isBroadcast\"&gt;组播?&lt;/param&gt; /// &lt;param name=\"groupAddress\"&gt;组地址&lt;/param&gt;/// &lt;param name=\"isIpV6\"&gt;IpV6模式?&lt;/param&gt;public UdpSender( int port, bool isBroadcast, string groupAddress = null, bool isIpV6 = false)&#123; GroupAddress = groupAddress; string hostName = Dns.GetHostName(); EndPoint = GetIPEndPoint(port, isBroadcast, hostName, groupAddress, isIpV6).Result; GroupAddress = groupAddress; string hostName = Dns.GetHostName(); EndPoint = GetIPEndPoint(port, isBroadcast, hostName, groupAddress, isIpV6).Result; Debug.WriteLine( $\"IPEndPoint: \" + $\"&#123;nameof(port)&#125;=&#123;port&#125;, i&#123;nameof(isBroadcast)&#125;=&#123;isBroadcast&#125;, \" + $\"&#123;nameof(hostName)&#125;=&#123;hostName&#125;, &#123;nameof(groupAddress)&#125;=&#123;groupAddress&#125;, \" + $\"&#123;nameof(isIpV6)&#125;=&#123;isIpV6&#125;\");&#125; 3.Public Methods12345678910111213141516171819202122232425262728293031/// &lt;summary&gt;/// 发送信息/// &lt;/summary&gt;/// &lt;param name=\"message\"&gt;待发送的信息&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public async void SendAsync(string message)&#123; try &#123; string localhost = Dns.GetHostName(); using (var client = new UdpClient()) &#123; if (GroupAddress != null) &#123; client.JoinMulticastGroup(IPAddress.Parse(GroupAddress)); &#125; byte[] datagram = Encoding.UTF8.GetBytes(message); await client.SendAsync(datagram, datagram.Length, EndPoint); if (GroupAddress != null) &#123; client.DropMulticastGroup(IPAddress.Parse(GroupAddress)); &#125; &#125; &#125; catch (Exception ex) &#123; throw ex; &#125;&#125; 4. Private Methods123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960/// &lt;summary&gt;/// 获取指定的IP端口/// &lt;/summary&gt;/// &lt;param name=\"port\"&gt;端口号&lt;/param&gt;/// &lt;param name=\"isBroadcast\"&gt;组播?&lt;/param&gt;/// &lt;param name=\"hostName\"&gt;主机名称&lt;/param&gt;/// &lt;param name=\"groupAddress\"&gt;组地址&lt;/param&gt;/// &lt;param name=\"isIpV6\"&gt;IpV6模式?&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;private static async Task&lt;IPEndPoint&gt; GetIPEndPoint( int port, bool isBroadcast, string hostName, string groupAddress, bool isIpV6)&#123; IPEndPoint endpoint; try &#123; if (isBroadcast) &#123; endpoint = new IPEndPoint(IPAddress.Broadcast, port); Logger.Debug($\"&#123;nameof(isBroadcast)&#125;=&#123;isBroadcast&#125;, &#123;nameof(port)&#125;=&#123;port&#125; \"); &#125; else if (hostName != null) &#123; IPHostEntry hostEntry = await Dns.GetHostEntryAsync(hostName); IPAddress address; if (isIpV6) &#123; address = hostEntry.AddressList.Where( a =&gt; a.AddressFamily == AddressFamily.InterNetworkV6 ).FirstOrDefault(); &#125; else &#123; address = hostEntry.AddressList.Where( a =&gt; a.AddressFamily == AddressFamily.InterNetwork ).FirstOrDefault(); &#125; endpoint = new IPEndPoint(address, port); Logger.Debug($\"&#123;nameof(hostName)&#125;=&#123;hostName&#125;, &#123;nameof(address)&#125;=&#123;address&#125;, &#123;nameof(isIpV6)&#125;=&#123;isIpV6&#125;\"); &#125; else if (groupAddress != null) &#123; endpoint = new IPEndPoint(IPAddress.Parse(groupAddress), port); Logger.Debug($\"&#123;nameof(groupAddress)&#125;=&#123;groupAddress&#125;, &#123;nameof(port)&#125;=&#123;port&#125; \"); &#125; else &#123; throw new InvalidOperationException($\"&#123;nameof(hostName)&#125;, &#123;nameof(isBroadcast)&#125;, or &#123;nameof(groupAddress)&#125; must be set\"); &#125; &#125; catch (Exception ex) &#123; throw ex; &#125; return endpoint;&#125; UdpReceiver.cs1.Properties123456789/// &lt;summary&gt;/// 端口号/// &lt;/summary&gt;public int Port &#123; get; private set; &#125;/// &lt;summary&gt;/// 组地址/// &lt;/summary&gt;public string GroupAddress &#123; get; private set; &#125; 2.Constructors1234567891011/// &lt;summary&gt;/// 创建一个新的接收器/// &lt;/summary&gt;/// &lt;param name=\"port\"&gt;端口号&lt;/param&gt;/// &lt;param name=\"groupAddress\"&gt;组地址&lt;/param&gt;public UdpReceiver(int port, string groupAddress = null)&#123; GroupAddress = groupAddress; Port = port; Logger.Info($\"Listening to &#123;nameof(Port)&#125;=&#123;Port&#125;, &#123;nameof(GroupAddress)&#125;=&#123;GroupAddress&#125;\");&#125; 3.Public Methods1234567891011121314151617181920212223242526272829303132/// &lt;summary&gt;/// 接收器工作/// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt;public async Task ReaderAsync()&#123; using (var client = new UdpClient(Port)) &#123; if (GroupAddress != null) &#123; Logger.Debug($\"JoinMulticastGroup = &#123;GroupAddress&#125;\"); client.JoinMulticastGroup(IPAddress.Parse(GroupAddress)); &#125; bool completed = false; do &#123; Logger.Debug(\"Listening...\"); UdpReceiveResult result = await client.ReceiveAsync(); byte[] datagram = result.Buffer; ; string received = Encoding.UTF8.GetString(datagram); Logger.Info($\"Received (from &#123;result.RemoteEndPoint.Address.ToString()&#125;)-&gt; &#123;received&#125;\"); completed = (received == \"closed\"); &#125; while (!completed); Logger.Debug(\"Receiver closing\"); if (GroupAddress != null) &#123; client.DropMulticastGroup(IPAddress.Parse(GroupAddress)); &#125; &#125;&#125;","categories":[{"name":"C#/UDP","slug":"C-UDP","permalink":"https://loongegg.github.io/categories/C-UDP/"}],"tags":[{"name":"C#","slug":"C","permalink":"https://loongegg.github.io/tags/C/"},{"name":"UDP","slug":"UDP","permalink":"https://loongegg.github.io/tags/UDP/"}]}],"categories":[{"name":"C#/UDP","slug":"C-UDP","permalink":"https://loongegg.github.io/categories/C-UDP/"}],"tags":[{"name":"C#","slug":"C","permalink":"https://loongegg.github.io/tags/C/"},{"name":"UDP","slug":"UDP","permalink":"https://loongegg.github.io/tags/UDP/"}]}